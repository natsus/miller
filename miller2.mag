// Miller's Algorithmの実装

// 有限体の定義
q := 13;
Fq := GF(q);

// 楕円曲線の定義
a := Fq!5; b := Fq!11;
E := EllipticCurve([Fq|a,b]);

// P の生成
tmp := #E(Fq);
F := Factorization(tmp);
r := F[#F][1];  // prime number
c := tmp div r;	// coset(余因子)

// 埋め込み次数kの計算
k := 1;
while Gcd(r,(q^k)-1) eq 1 do
  k := k+1;
end while;

// 拡大体の定義 
Fqk := GF(q,k);
// 関数の初期設定
PR_func<X,Y> := PolynomialRing(Fqk,2);

Ek := EllipticCurve([Fqk|a,b]);

/* #E(Fq) = r*c
* c*Random(E(Fq)) = c*{a*Ran(E(Fq)[r]) + b*Ran(E(Fq)[c])}
*                 = c*a*Ran(E(Fq)[r]) + Inf
*                 = c*a*Rand(E(Fq)[r]) = Q
*    i.e. A*Rand(E(Fq)[r]) ∈ E(Fq)[r]
*/
P := c*Random(E); P := 2*E![7,5,1];
Q := Random(Ek); Q := 2*Ek![Fqk.1^22526 , Fqk.1^17094 , 1];
r_a := Intseq(r,2);
len := #r_a;

// 垂線を求める
function calculate_vertical_line(A)
  if A eq Identity(E) then
    return PR_func!1; 
  else
    f := X-A[1];
    return f;
  end if;
end function;

// 二点を通る直線を求める
function calculate_straight_line(A, B)
  if (A[1] eq B[1]) and (A[2] ne B[2]) then
    return calculate_vertical_line(A);
  else
    f := (A[2]-B[2])*(A[1]-B[1])^(-1) * (X-A[1]) + A[2] - Y;
    return f;
  end if;
end function;

// 接線を求める
/*
 * E : y^2 = x^3 + ax + b
 * (2y)*y' = 3*x^2 + a
 * y' = (3*x^2 + a) / 2y
 */
function calculate_tangent_line(A)
  if A[2] eq 0 then
    return calculate_vertical_line(A);
  else
    grad := (3*A[1]^2+a)*(2*A[2])^-1;
    B := A[2]-grad*A[1]; // 直線の切片
    f := grad*X + B - Y;
    return f;
  end if;
end function;

function trans_xy(A)
  return [A[1],A[2]];
end function;

function TatePairing(P, Q, r)
  
  
  // Rの生成
  repeat
    R := Random(Ek);
    R;
  until Order(Q)*R eq Identity(Ek);
  
  // R := Ek![Fqk.1^4415 , Fqk.1^15357 , 1];
  
  
  
P;Q;R;
  
  f := 1;
  V := P;
  
  j := len - 1;
  repeat
    l := calculate_tangent_line(V);
    v := calculate_vertical_line(2*V);
    V := 2*V;
l;v;
    f := f*f*(Evaluate(l,trans_xy(Q+R))*Evaluate(v,trans_xy(R)))*(Evaluate(v,trans_xy(Q+R))*Evaluate(l,trans_xy(R)))^-1;
  
    if r_a[j] eq 1 then
      l := calculate_straight_line(V,P);
      v := calculate_vertical_line(V+P);
      V := V+P;
      f := f*(Evaluate(l,trans_xy(Q+R))*Evaluate(v,trans_xy(R)))*(Evaluate(v,trans_xy(Q+R))*Evaluate(l,trans_xy(R)))^-1;
    end if;
  
    j := j -1;
  until j eq 0;
  
  //f := f^5712;
  
  return f;
  
end function;

