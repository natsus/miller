// Miller's Algorithmの実装


// 二点を通る直線を求める
function calculate_straight_line(A, B)
  f := (A[2]-B[2])*(A[1]-B[1])^(-1) * (X-A[1]) + A[2] - Y;
  return f;
end function;

// 接線を求める
/*
 * E : y^2 = x^3 + ax + b
 * (2y)*y' = 3*x^2 + a
 * y' = (3*x^2 + a) / 2y
 */
function calculate_tangent_line(A)
  grad := (3*A[1]^2+a)*(2*A[2])^-1;
  B := A[2]-grad*A[1]; // 直線の切片
  f := grad*X + B - Y;
  return f;
end function;

// 垂線を求める
function calculate_vertical_line(A)
  f := X-A[1];
  return f;
end function;

function trans_xy(A)
  return [A[1],A[2]];
end function;



// 有限体の定義
Fq := GF(13);
// 楕円曲線の定義
a := 2; b := 3;
E := EllipticCurve([Fq|a,b]);

// P の生成
tmp := #E(Fq);
F := Factorization(tmp);
r := F[#F][1];  // prime number
c := tmp div r;	// coset(余因子)

/* #E(Fq) = r*c
 * c*Random(E(Fq)) = c*{a*Ran(E(Fq)[r]) + b*Ran(E(Fq)[c])}
 *                 = c*a*Ran(E(Fq)[r]) + Inf
 *                 = c*a*Rand(E(Fq)[r]) = Q
 *    i.e. A*Rand(E(Fq)[r]) ∈ E(Fq)[r]
 */
P := c*Random(E);
Q := Random(E);
r_a := Intseq(r,2);
len := #r_a;

// Rの生成
repeat
  R := Random(E);
until (R eq P) or (R eq -Q) or (R eq (P-Q)) or (R eq Identity(E));

// 関数の初期設定
PR_func<X,Y> := PolynomialRing(Fq,2);
/*
> PR_func<X,Y> := PolynomialRing(Fq,2);
> f := 2*X+Y;
> Evaluate(f,[2,1]);
*/ 

f := 1;
V := P;

j := len - 1;
repeat
  l := calculate_tangent_line(V);
  v := calculate_vertical_line(2*V);
  V := 2*V;
  f := f*f*(Evaluate(l,trans_xy(Q+R))*Evaluate(v,trans_xy(R)))*(Evaluate(v,trans_xy(Q+R))*Evaluate(l,trans_xy(R)))^-1;

  if r_a[j] eq 1 then
    l := calculate_straight_line(V,P);
    v := calculate_vertical_line(V+P);
    V := V+P;
    f := f*(Evaluate(l,trans_xy(Q+R))*Evaluate(v,trans_xy(R)))*(Evaluate(v,trans_xy(Q+R))*Evaluate(l,trans_xy(R)))^-1;
  end if;

  j := j -1;
until j eq 1;

// 出力
f;

